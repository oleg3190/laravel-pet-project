version: "3.7"

services:
  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/helpers.sh:/helpers.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
      - setup:/state:Z
      # (!) CA certificate. Generate using instructions from tls/README.md
      - ./tls/kibana/elasticsearch-ca.pem:/elasticsearch-ca.pem:ro,z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/conf/patterns:/usr/share/logstash/patterns:ro,Z
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ../data/api/storage/logs/:/usr/share/logstash/logs/laravel
      - ${NGINX_HOST_LOG_PATH}:/usr/share/logstash/logs/nginx
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      # (!) CA certificate. Generate using instructions from tls/README.md
      - ./tls/kibana/elasticsearch-ca.pem:/usr/share/logstash/config/elasticsearch-ca.pem:ro,z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      # (!) TLS certificates. Generate using instructions from tls/README.md.
      - ./tls/kibana/elasticsearch-ca.pem:/usr/share/kibana/config/elasticsearch-ca.pem:ro,z
      - ./tls/kibana/instance.crt:/usr/share/kibana/config/instance.crt:ro,Z
      - ./tls/kibana/instance.key:/usr/share/kibana/config/instance.key:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    image: bitnami/elasticsearch:${ELASTIC_VERSION}
    ports:
      - "9200:9200"
    networks:
      - elk

  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
        - CONF_PATH=${CONF_PATH}
    cap_add:
      - all
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/master/my.cnf:/etc/mysql/my.cnf
    #- ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - elk

  nginx:
    image: nginx:alpine
    volumes:
      - ../data/api:/var/www
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/conf.d/
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
      - "81:81"
      - '8081:8081'
    depends_on:
      - fpm
    networks:
      - elk

  fpm:
    build:
      context: ./fpm
    ports:
      - "${FPM_PORT}:9000"
    networks:
      - elk
    volumes:
      - ../data/api:/var/www
      - ./fpm/php.ini:/usr/local/etc/php/conf.d/php.ini
      #- ./fpm/xhprof.ini:/usr/local/etc/php/conf.d/xhprof.ini


  #blackfire:
  #  image: blackfire/blackfire:2
  #  ports:
  #    - "8307:8307"
  #  environment:
  #      # Exposes BLACKFIRE_SERVER_* environment variables from the host
  #      BLACKFIRE_SERVER_ID: 14940e29-ed51-4714-bfa6-fe7f40cd76b7
  #     BLACKFIRE_SERVER_TOKEN: faf173c41b8b918c3c7f90b10e8a7a4a901707371d370fe65371fa1f9bd3a2af
  #      BLACKFIRE_CLIENT_ID: 4cb4e466-0318-4ef2-a311-43671bc226da
  #      BLACKFIRE_CLIENT_TOKEN: 4358e2a673425293dc42046751c632f9b11db50a5788508a798cd692468d522b


networks:
  elk:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  setup:
  elasticsearch:
  mysql:
    driver: local
  nginx:
    driver: local
  logs:
    driver: local
